<div class="mx-switch">
    <div style="height: 100%; display: flex; flex-direction: column; justify-content: center;">
        <label class="switch">
            <input type="checkbox" @bind="Value">
            <span></span>
        </label>
    </div>
    <div class="label">
        <label>
            @Label @if (ShowMessage)
            {
                if (!Required)
                {
                    <span style="padding-left: 10px; text-transform: none; font-style: italic; font-size: 8pt; opacity: 0.7;">Optional</span>
                }
                else if (Valid.HasValue)
                {
                    if (Valid.Value)
                    {
                        <span style="padding-left: 10px; color: green;"><i class="fas fa-check"></i></span>
                    }
                    else
                    {
                        <span style="padding-left: 10px; color: red; text-transform: none; font-style: italic;"><i class="fas fa-exclamation"></i> @ErrorMessage</span>
                    }
                }
            }
        </label>
    </div>
</div>

@code {

    bool value = false;

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public bool Required { get; set; } = false;

    [Parameter]
    public string ErrorMessage { get; set; } = "Error";

    [Parameter]
    public bool? Valid { get; set; }

    [Parameter]
    public bool ShowMessage { get; set; } = true;

    [Parameter]
    public bool Value
    {
        get => value;
        set
        {
            if (Required)
            {
                ErrorMessage = "Required";
                Valid = false;
            }

            if (this.value != value)
            {
                this.value = value;
                ValueChanged.InvokeAsync(value);
            }
        }

    }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }


    async System.Threading.Tasks.Task Update()
    {
        await ValueChanged.InvokeAsync(value);
    }

}